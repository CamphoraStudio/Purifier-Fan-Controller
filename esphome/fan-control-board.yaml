substitutions:
  fan_offset_step: "0.01f" # Stagger each fan speed by 1% (0.01)

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

globals:
  - id: manual_fan_speed_state
    type: float
    initial_value: '0.0'
    restore_value: yes

sensor:
  - platform: adc
    pin: GPIO0
    id: fan_speed_input
    attenuation: auto
    internal: true
    update_interval: 250ms
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 1
    on_value:
      then:
        - lambda: |-
            const float OFF_ZONE_VOLTAGE = 0.25f;
            const float GUARD_BAND_VOLTAGE = 2.75f;
            float target_level = 0.0f;

            if (x < OFF_ZONE_VOLTAGE) {
              // 1. Stable Off Zone
              target_level = 0.0f;
            } else if (x > GUARD_BAND_VOLTAGE) {
              // 2. Guard Band
              target_level = 1.0f;
            } else {
              // 3. Linear Mapping from 0% to 100%
              target_level = (x - OFF_ZONE_VOLTAGE) / (GUARD_BAND_VOLTAGE - OFF_ZONE_VOLTAGE);
            }
            
            // Publish to the 0-100 number component for the UI
            id(manual_fan_speed).publish_state(target_level * 100.0);

            // Set staggered speeds for each fan
            id(pwm_fan_1).set_level(target_level);
            id(pwm_fan_2).set_level(clamp(target_level - (1 * ${fan_offset_step}), 0.0f, 1.0f));
            id(pwm_fan_3).set_level(clamp(target_level - (2 * ${fan_offset_step}), 0.0f, 1.0f));
            id(pwm_fan_4).set_level(clamp(target_level - (3 * ${fan_offset_step}), 0.0f, 1.0f));
            id(pwm_fan_5).set_level(clamp(target_level - (4 * ${fan_offset_step}), 0.0f, 1.0f));

number:
  - platform: template
    name: "Manual Fan Speed"
    id: manual_fan_speed
    min_value: 0
    max_value: 100
    step: 1
    # This number component will now set the global variable, but the ADC lambda is what controls the fans directly.
    # This allows HA or other services to change the "target" speed later.
    lambda: 'return id(manual_fan_speed_state);'
    set_action:
      - globals.set:
          id: manual_fan_speed_state
          value: !lambda 'return x;'

# Turns on the 12V fan power rail at boot and keeps it on.
switch:
  - platform: gpio
    pin: GPIO18
    id: enable_12v
    name: "12V Rail"
    internal: true
    restore_mode: ALWAYS_ON

# Define all 5 PWM fan outputs
output:
  - platform: ledc
    pin: GPIO3
    id: pwm_fan_1
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO4
    id: pwm_fan_2
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO5
    id: pwm_fan_3
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO6
    id: pwm_fan_4
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO7
    id: pwm_fan_5
    frequency: 25000 Hz