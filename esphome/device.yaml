esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

switch:
  - platform: restart
    name: "Air Purifier Restart"

globals:
  - id: manual_fan_speed_state
    type: float
    initial_value: '0.0'
    restore_value: yes

sensor:
  - platform: adc
    pin: GPIO0
    id: fan_speed_input
    attenuation: auto
    internal: true
    update_interval: 250ms
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 1
    on_value:
      then:
        - lambda: |-
            const float min_voltage = 0.1; 
            const float max_voltage = 3.1;
            float level = clamp((x - min_voltage) / (max_voltage - min_voltage), 0.0f, 1.0f);
            id(pwm_fan_4).set_level(level);
            id(manual_fan_speed).publish_state(level * 100.0);

number:
  - platform: template
    name: "Manual Fan Speed"
    id: manual_fan_speed
    min_value: 0
    max_value: 100
    step: 1
    lambda: 'return id(manual_fan_speed_state);'
    set_action:
      then:
        - globals.set:
            id: manual_fan_speed_state
            value: !lambda 'return x;'
        - output.set_level:
            id: pwm_fan_4
            level: !lambda "return x / 100.0;"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: true
    id: power_good
    name: "Power Good Status"
    internal: false
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_on: power_good
            then:
              - switch.turn_on: enable_12v
            else:
              - switch.turn_off: enable_12v
              - output.set_level: { id: pwm_fan_4, level: 0.0 }

switch:
  - platform: gpio
    pin: GPIO18
    id: enable_12v
    name: "12V Rail"
    internal: false
    restore_mode: ALWAYS_OFF

output:
  - platform: ledc
    pin: GPIO4
    id: pwm_fan_4
    frequency: 25000 Hz
